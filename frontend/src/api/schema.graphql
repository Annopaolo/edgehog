schema {
  query: RootQueryType
  mutation: RootMutationType
}

"Describes an operating system of a device."
type OsInfo {
  "The name of the operating system."
  name: String

  "The version of the operating system."
  version: String
}

"Describes a modem of a device."
type Modem {
  "The identifier of the modem."
  slot: String!

  "The operator apn address."
  apn: String

  "The modem IMEI code."
  imei: String

  "The SIM IMSI code."
  imsi: String

  "Carrier operator name."
  carrier: String

  "Unique identifier of the cell."
  cellId: Int

  "The cell tower's Mobile Country Code (MCC)."
  mobileCountryCode: Int

  "The cell tower's Mobile Network Code."
  mobileNetworkCode: Int

  "The Local Area Code."
  localAreaCode: Int

  "The current registration status of the modem."
  registrationStatus: ModemRegistrationStatus

  "Signal strength in dBm."
  rssi: Float

  "Access Technology"
  technology: ModemTechnology
}

"""
Represents a specific system model.

A system model corresponds to what the users thinks as functionally equivalent devices (e.g. two revisions of a device containing two different embedded chips but having the same enclosure and the same functionality).Each SystemModel must be associated to a specific HardwareType.
"""
type SystemModel implements Node {
  "The ID of an object"
  id: ID!

  "The display name of the system model."
  name: String!

  "The identifier of the system model."
  handle: String!

  "The URL of the related picture."
  pictureUrl: String

  "The type of hardware that can be plugged into the system model."
  hardwareType: HardwareType!

  "The list of part numbers associated with the system model."
  partNumbers: [String!]!

  """
  A localized description of the system model.
  The language of the description can be controlled passing an Accept-Language header in the request. If no such header is present, the default tenant language is returned.
  """
  description: LocalizedText
}

type CreateHardwareTypePayload {
  "The created hardware type."
  hardwareType: HardwareType!
}

input UpdateHardwareTypeInput {
  "The ID of the hardware type to be updated."
  hardwareTypeId: ID!

  "The display name of the hardware type."
  name: String

  """
  The identifier of the hardware type.

  It should start with a lower case ASCII letter and only contain lower case ASCII letters, digits and the hyphen - symbol.
  """
  handle: String

  "The list of part numbers associated with the hardware type."
  partNumbers: [String!]
}

"Represents an uploaded file."
scalar Upload

"Describes the current usage of a storage unit on a device."
type StorageUnit {
  "The label of the storage unit."
  label: String!

  "The total number of bytes of the storage unit."
  totalBytes: Int

  "The number of free bytes of the storage unit."
  freeBytes: Int
}

"Describes the list of WiFi Access Points found by the device."
type WifiScanResult {
  "The channel used by the Access Point."
  channel: Int

  "The ESSID advertised by the Access Point."
  essid: String

  "The MAC address advertised by the Access Point."
  macAddress: String

  "The power of the radio signal, measured in dBm."
  rssi: Int

  "The date at which the device found the Access Point."
  timestamp: DateTime!
}

"The current status of the battery."
enum BatteryStatus {
  "The battery is charging."
  CHARGING

  "The battery is discharging."
  DISCHARGING

  "The battery is idle."
  IDLE

  "The battery is either in a charging or in an idle state, since the hardware doesn't allow to distinguish between them."
  EITHER_IDLE_OR_CHARGING

  "The battery is in a failed state."
  FAILURE

  "The battery is removed."
  REMOVED

  "The battery status cannot be determined."
  UNKNOWN
}

"""
Describes hardware-related info of a device.

It exposes data read by a device's operating system about the underlying hardware.
"""
type HardwareInfo {
  "The architecture of the CPU."
  cpuArchitecture: String

  "The reference code of the CPU model."
  cpuModel: String

  "The display name of the CPU model."
  cpuModelName: String

  "The vendor's name."
  cpuVendor: String

  "The Bytes count of memory."
  memoryTotalBytes: Int
}

"""
Describes the position of a device.

The position is estimated by means of Edgehog's Geolocation modules and the data published by the device.
"""
type DeviceLocation {
  "The latitude coordinate."
  latitude: Float!

  "The longitude coordinate."
  longitude: Float!

  "The accuracy of the measurement, in meters."
  accuracy: Float

  "The formatted address estimated for the position."
  address: String

  "The date at which the measurement was made."
  timestamp: DateTime!
}

interface Node {
  "The ID of the object."
  id: ID!
}

type CreateManualOtaOperationPayload {
  "The pending OTA operation"
  otaOperation: OtaOperation!
}

"Describes a battery slot of a device."
type BatterySlot {
  "The identifier of the battery slot."
  slot: String!

  "Battery level estimated percentage [0.0%-100.0%]"
  levelPercentage: Float

  "Battery level measurement absolute error [0.0-100.0]"
  levelAbsoluteError: Float

  "The current status of the battery."
  status: BatteryStatus
}

type CreateSystemModelPayload {
  "The created system model."
  systemModel: SystemModel!
}

input UpdateSystemModelInput {
  "The ID of the system model to be updated."
  systemModelId: ID!

  "The display name of the system model."
  name: String

  """
  The identifier of the system model.

  It should start with a lower case ASCII letter and only contain lower case ASCII letters, digits and the hyphen - symbol.
  """
  handle: String

  """
  The file blob of a related picture.

  When this field is specified, the pictureUrl field is ignored.
  """
  pictureFile: Upload

  """
  The file URL of a related picture.

  Specifying a null value will remove the existing picture.
  When the pictureFile field is specified, this field is ignored.
  """
  pictureUrl: String

  "The list of part numbers associated with the system model."
  partNumbers: [String!]

  "An optional localized description. This description can only use the default tenant locale."
  description: LocalizedTextInput
}

"Describes the current status of the operating system of a device."
type SystemStatus {
  "The identifier of the performed boot sequence."
  bootId: String

  "The number of free bytes of memory."
  memoryFreeBytes: Int

  "The number of running tasks on the system."
  taskCount: Int

  "The number of milliseconds since the last system boot."
  uptimeMilliseconds: Int

  "The date at which the system status was read."
  timestamp: DateTime!
}

"Status of the OTA operation."
enum OtaOperationStatus {
  "The OTA operation was created and is waiting an acknowledgment from the device"
  PENDING

  "The OTA operation was accepted from the device"
  IN_PROGRESS

  "The OTA operation ended with an error"
  ERROR

  "The OTA operation ended succesfully"
  DONE
}

"The current GSM/LTE registration status of the modem."
enum ModemRegistrationStatus {
  "Not registered, modem is not currently searching a new operator to register to."
  NOT_REGISTERED

  "Registered, home network."
  REGISTERED

  "Not registered, but modem is currently searching a new operator to register to."
  SEARCHING_OPERATOR

  "Registration denied."
  REGISTRATION_DENIED

  "Unknown (e.g. out of GERAN/UTRAN/E-UTRAN coverage)."
  UNKNOWN

  "Registered, roaming."
  REGISTERED_ROAMING
}

type RootMutationType {
  "Creates a new hardware type."
  createHardwareType(input: CreateHardwareTypeInput!): CreateHardwareTypePayload

  "Updates a hardware type."
  updateHardwareType(input: UpdateHardwareTypeInput!): UpdateHardwareTypePayload

  "Creates a new system model."
  createSystemModel(input: CreateSystemModelInput!): CreateSystemModelPayload

  "Updates a system model."
  updateSystemModel(input: UpdateSystemModelInput!): UpdateSystemModelPayload

  "Initiates an OTA update with a user provided OS image"
  createManualOtaOperation(
    input: CreateManualOtaOperationInput!
  ): CreateManualOtaOperationPayload
}

"The current access technology of the serving cell."
enum ModemTechnology {
  "GSM."
  GSM

  "GSM Compact."
  GSM_COMPACT

  "UTRAN."
  UTRAN

  "GSM with EGPRS."
  GSM_EGPRS

  "UTRAN with HSDPA."
  UTRAN_HSDPA

  "UTRAN with HSUPA."
  UTRAN_HSUPA

  "UTRAN with HSDPA and HSUPA."
  UTRAN_HSDPA_HSUPA

  "E-UTRAN."
  EUTRAN
}

type RootQueryType {
  "Fetches the list of all devices."
  devices(
    "An optional set of filters to apply when fetching the devices."
    filter: DeviceFilter
  ): [Device!]!

  "Fetches a single device."
  device("The ID of the device." id: ID!): Device

  "Fetches the list of all hardware types."
  hardwareTypes: [HardwareType!]!

  "Fetches a single hardware type."
  hardwareType("The ID of the hardware type." id: ID!): HardwareType

  "Fetches the list of all system models."
  systemModels: [SystemModel!]!

  "Fetches a single system model."
  systemModel("The ID of the system model." id: ID!): SystemModel

  "Retrieves information about the current tenant"
  tenantInfo: TenantInfo!

  node("The ID of an object." id: ID!): Node
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

"""
Denotes a device instance that connects and exchanges data.

Each Device is associated to a specific SystemModel, which in turn is associated to a specific HardwareType.
A Device also exposes info about its connection status and some sets of data read by its operating system.
"""
type Device implements Node {
  "The ID of an object"
  id: ID!

  "The display name of the device."
  name: String!

  "The device ID used to connect to the Astarte cluster."
  deviceId: String!

  "Tells whether the device is connected or not to Astarte."
  online: Boolean!

  "The date at which the device last connected to Astarte."
  lastConnection: DateTime

  "The date at which the device last disconnected from Astarte."
  lastDisconnection: DateTime

  "The system model of the device."
  systemModel: SystemModel

  "Info read from the device's hardware."
  hardwareInfo: HardwareInfo

  "The estimated location of the device."
  location: DeviceLocation

  "The current usage of the storage units of the device."
  storageUsage: [StorageUnit!]

  "The current status of the operating system of the device."
  systemStatus: SystemStatus

  "The list of WiFi Access Points found by the device."
  wifiScanResults: [WifiScanResult!]

  "The status of the battery slots of the device."
  batteryStatus: [BatterySlot!]

  "Information about the operating system's base image for the device."
  baseImage: BaseImage

  "Information about the operating system of the device."
  osInfo: OsInfo

  "The existing OTA operations for this device"
  otaOperations: [OtaOperation!]!

  "The status of cellular connection of the device."
  cellularConnection: [Modem!]
}

input CreateHardwareTypeInput {
  "The display name of the hardware type."
  name: String!

  """
  The identifier of the hardware type.

  It should start with a lower case ASCII letter and only contain lower case ASCII letters, digits and the hyphen - symbol.
  """
  handle: String!

  "The list of part numbers associated with the hardware type."
  partNumbers: [String!]!
}

input CreateManualOtaOperationInput {
  "The GraphQL ID (not the Astarte Device ID) of the target device"
  deviceId: ID!

  "An uploaded file of the base image."
  baseImageFile: Upload
}

input CreateSystemModelInput {
  "The display name of the system model."
  name: String!

  """
  The identifier of the system model.

  It should start with a lower case ASCII letter and only contain lower case ASCII letters, digits and the hyphen - symbol.
  """
  handle: String!

  """
  The file blob of a related picture.

  When this field is specified, the pictureUrl field is ignored.
  """
  pictureFile: Upload

  """
  The file URL of a related picture.

  Specifying a null value will remove the existing picture.
  When the pictureFile field is specified, this field is ignored.
  """
  pictureUrl: String

  "The list of part numbers associated with the system model."
  partNumbers: [String!]!

  "The ID of the hardware type that can be used by devices of this model."
  hardwareTypeId: ID!

  "An optional localized description. This description can only use the default tenant locale."
  description: LocalizedTextInput
}

"""
Describes a set of filters to apply when fetching a list of devices.

When multiple filters are specified, they are applied in an AND fashion to further refine the results.
"""
input DeviceFilter {
  "Whether to return devices connected or not to Astarte."
  online: Boolean

  "A string to match against the device ID. The match is case-insensitive and tests whether the string is included in the device ID."
  deviceId: String

  """
  A string to match against the part number of the device's system model.
  The match is case-insensitive and tests whether the string is included in the part number of the device's system model.
  """
  systemModelPartNumber: String

  """
  A string to match against the handle of the device's system model.
  The match is case-insensitive and tests whether the string is included in the handle of the device's system model.
  """
  systemModelHandle: String

  """
  A string to match against the name of the device's system model.
  The match is case-insensitive and tests whether the string is included in the name of the device's system model.
  """
  systemModelName: String

  """
  A string to match against the part number of the device's hardware type.
  The match is case-insensitive and tests whether the string is included in the part number of the device's hardware type.
  """
  hardwareTypePartNumber: String

  """
  A string to match against the handle of the device's hardware type.
  The match is case-insensitive and tests whether the string is included in the handle of the device's hardware type.
  """
  hardwareTypeHandle: String

  """
  A string to match against the name of the device's hardware type.
  The match is case-insensitive and tests whether the string is included in the name of the device's hardware type.
  """
  hardwareTypeName: String
}

"Represents information about a tenant"
type TenantInfo {
  "The tenant name"
  name: String!

  "The tenant slug"
  slug: String!

  "The default locale supported by the tenant"
  defaultLocale: String!
}

"An OTA update operation"
type OtaOperation implements Node {
  "The ID of an object"
  id: ID!

  "The URL of the base image being installed on the device"
  baseImageUrl: String!

  "The current status of the operation"
  status: OtaOperationStatus!

  "The current status code of the operation"
  statusCode: OtaOperationStatusCode

  "The device targeted from the operation"
  device: Device!

  "The creation timestamp of the operation"
  createdAt: DateTime!

  "The timestamp of the last update to the operation"
  updatedAt: DateTime!
}

"""
Denotes a type of hardware that devices can have.

It refers to the physical components embedded in a device.
This can represent, e.g., multiple revisions of a PCB (each with a different part number) which are functionally equivalent from the device point of view.
"""
type HardwareType implements Node {
  "The ID of an object"
  id: ID!

  "The display name of the hardware type."
  name: String!

  "The identifier of the hardware type."
  handle: String!

  "The list of part numbers associated with the hardware type."
  partNumbers: [String!]!
}

"Status code of the OTA operation."
enum OtaOperationStatusCode {
  "A network error was encountered"
  NETWORK_ERROR

  "An NVS error was encountered"
  NVS_ERROR

  "The OTA operation is already in progress"
  ALREADY_IN_PROGRESS

  "The OTA operation has failed"
  FAILED

  "A deploy error was encountered"
  DEPLOY_ERROR

  "A boot partition error was encountered"
  WRONG_PARTITION
}

"Describes an operating system's base image for a device."
type BaseImage {
  "The name of the image."
  name: String

  "The version of the image."
  version: String

  "Human readable build identifier of the image."
  buildId: String

  "A unique string that identifies the release, usually the image hash."
  fingerprint: String
}

"A text expressed in a specific locale."
type LocalizedText {
  "The locale, expressed in the format indicated in RFC 5646 (e.g. en-US)"
  locale: String!

  "The localized text"
  text: String!
}

type UpdateHardwareTypePayload {
  "The updated hardware type."
  hardwareType: HardwareType!
}

type UpdateSystemModelPayload {
  "The updated system model."
  systemModel: SystemModel!
}

"Input object used to provide a localizedText as an input."
input LocalizedTextInput {
  "The locale, expressed in the format indicated in RFC 5646 (e.g. en-US)"
  locale: String!

  "The localized text"
  text: String!
}
