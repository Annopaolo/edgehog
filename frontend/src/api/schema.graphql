schema {
  query: RootQueryType
  mutation: RootMutationType
}

input CreateHardwareTypeInput {
  hardwareType: HardwareTypeInput!
}

type CreateHardwareTypePayload {
  hardwareType: HardwareType!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

type Device implements Node {
  deviceId: String!
  hardwareInfo: HardwareInfo

  """
  The ID of an object
  """
  id: ID!
  lastConnection: DateTime
  lastDisconnection: DateTime
  name: String!
  online: Boolean!
}

type HardwareInfo {
  cpuArchitecture: String
  cpuModel: String
  cpuModelName: String
  cpuVendor: String
  memoryTotalBytes: Int
}

type HardwareType implements Node {
  handle: String!

  """
  The ID of an object
  """
  id: ID!
  name: String!
  partNumbers: [String!]!
}

input HardwareTypeInput {
  handle: String!
  name: String!
  partNumbers: [String!]!
}

interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type RootMutationType {
  createHardwareType(input: CreateHardwareTypeInput!): CreateHardwareTypePayload
  updateHardwareType(input: UpdateHardwareTypeInput!): UpdateHardwareTypePayload
}

type RootQueryType {
  """
  Get a single device
  """
  device(id: ID!): Device

  """
  List devices
  """
  devices: [Device!]!
  hardwareType(id: ID!): HardwareType
  hardwareTypes: [HardwareType!]!
  node(
    """
    The ID of an object.
    """
    id: ID!
  ): Node
}

input UpdateHardwareTypeInput {
  hardwareType: HardwareTypeInput!
  id: ID!
}

type UpdateHardwareTypePayload {
  hardwareType: HardwareType!
}
