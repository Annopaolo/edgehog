schema {
  query: RootQueryType
  mutation: RootMutationType
}

type ApplianceModel implements Node {
  handle: String!
  hardwareType: HardwareType!

  """
  The ID of an object
  """
  id: ID!
  name: String!
  partNumbers: [String!]!
}

input CreateApplianceModelInput {
  handle: String!
  hardwareTypeId: ID!
  name: String!
  partNumbers: [String!]!
}

type CreateApplianceModelPayload {
  applianceModel: ApplianceModel!
}

input CreateHardwareTypeInput {
  handle: String!
  name: String!
  partNumbers: [String!]!
}

type CreateHardwareTypePayload {
  hardwareType: HardwareType!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

type Device implements Node {
  """
  The appliance model of the device.
  """
  applianceModel: ApplianceModel
  deviceId: String!
  hardwareInfo: HardwareInfo

  """
  The ID of an object
  """
  id: ID!
  lastConnection: DateTime
  lastDisconnection: DateTime
  location: DeviceLocation
  name: String!
  online: Boolean!

  """
  The current usage of the storage units of the device.
  """
  storageUsage: [StorageUnit!]
  wifiScanResults: [WifiScanResult!]
}

input DeviceFilter {
  applianceModelHandle: String
  applianceModelName: String
  applianceModelPartNumber: String
  deviceId: String
  hardwareTypeHandle: String
  hardwareTypeName: String
  hardwareTypePartNumber: String
  online: Boolean
}

type DeviceLocation {
  accuracy: Float
  address: String
  latitude: Float!
  longitude: Float!
  timestamp: DateTime!
}

type HardwareInfo {
  cpuArchitecture: String
  cpuModel: String
  cpuModelName: String
  cpuVendor: String
  memoryTotalBytes: Int
}

type HardwareType implements Node {
  handle: String!

  """
  The ID of an object
  """
  id: ID!
  name: String!
  partNumbers: [String!]!
}

interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type RootMutationType {
  createApplianceModel(
    input: CreateApplianceModelInput!
  ): CreateApplianceModelPayload
  createHardwareType(input: CreateHardwareTypeInput!): CreateHardwareTypePayload
  updateApplianceModel(
    input: UpdateApplianceModelInput!
  ): UpdateApplianceModelPayload
  updateHardwareType(input: UpdateHardwareTypeInput!): UpdateHardwareTypePayload
}

type RootQueryType {
  applianceModel(id: ID!): ApplianceModel
  applianceModels: [ApplianceModel!]!

  """
  Get a single device
  """
  device(id: ID!): Device

  """
  List devices
  """
  devices(filter: DeviceFilter): [Device!]!
  hardwareType(id: ID!): HardwareType
  hardwareTypes: [HardwareType!]!
  node(
    """
    The ID of an object.
    """
    id: ID!
  ): Node
}

"""
Describes the current usage of a storage unit on a device.
"""
type StorageUnit {
  """
  The number of free bytes of the storage unit.
  """
  freeBytes: Int

  """
  The label of the storage unit.
  """
  label: String!

  """
  The total number of bytes of the storage unit.
  """
  totalBytes: Int
}

input UpdateApplianceModelInput {
  applianceModelId: ID!
  handle: String
  name: String
  partNumbers: [String!]
}

type UpdateApplianceModelPayload {
  applianceModel: ApplianceModel!
}

input UpdateHardwareTypeInput {
  handle: String
  hardwareTypeId: ID!
  name: String
  partNumbers: [String!]
}

type UpdateHardwareTypePayload {
  hardwareType: HardwareType!
}

type WifiScanResult {
  channel: Int
  essid: String
  macAddress: String
  rssi: Int
  timestamp: DateTime!
}
