#!/usr/bin/env python3
#
# This file is part of Edgehog.
#
# Copyright 2021 SECO Mind Srl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

import argparse
import datetime
import jwt

default_auth_paths = [".*::.*"]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a valid JWT for Edgehog")
    parser.add_argument("-k", "--private-key", type=str, required=True, help="Path to the private key file for signing "\
        "the Authorization token.")
    parser.add_argument("-e", "--expiry", type=int, required=False, default=300, help="Expiry of the token in seconds. "\
        "If 0, the token never expires. Defaults to 5 minutes.")
    parser.add_argument("-a", "--auth-paths", type=str, required=False, nargs='+', default=default_auth_paths,
        help="Defines a series of regular expressions for path-based authorization.")
    args = parser.parse_args()
    args_map = vars(args)

    with open(args_map["private_key"], "r") as pk:
        private_key_pem = pk.read()

        auth_paths = args_map["auth_paths"]
        now = datetime.datetime.utcnow()
        claims = {"e_tga": auth_paths, "iat": now}
        expiry = args_map["expiry"]
        if expiry > 0:
            claims["exp"] = now + datetime.timedelta(seconds=expiry)

        algo = None
        if "-----BEGIN RSA PRIVATE KEY-----" in private_key_pem:
            algo = "RS256"
        elif "-----BEGIN EC PRIVATE KEY-----" in private_key_pem:
            algo = "ES256"

        encoded = jwt.encode(claims, private_key_pem, algorithm=algo)
        print("{0}".format(encoded.decode()))
